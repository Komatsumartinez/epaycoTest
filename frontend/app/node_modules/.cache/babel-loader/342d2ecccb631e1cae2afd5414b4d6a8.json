{"ast":null,"code":"import React, { createContext, useReducer } from 'react'; //import { GET_DATA } from '../graphql/queries/data';\n//import { useQuery } from 'react-apollo';\n\nexport const initialState = {\n  data: [],\n  cliente: {\n    documento: '',\n    nombres: undefined,\n    mail: undefined,\n    celular: '',\n    action: 'create'\n  },\n  billetera: {\n    cliente_id: '',\n    saldo: 0,\n    ultima_actividad: '',\n    token: '',\n    action: 'consulta',\n    monto_pago: 0\n  }\n};\nexport const GlobalState = createContext(initialState);\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case \"CREATE_DATA\":\n      //console.log(action.payload, \"create data action value\")\n      return { ...state,\n        data: state.data.concat([action.payload]),\n        loading: false\n      };\n\n    case \"GET_DATA\":\n      //console.log(action.payload, \"fetch data action value\")\n      return { ...state,\n        data: action.payload\n      };\n\n    case \"EDIT_DATA\":\n      return { ...state,\n        singleData: action.payload\n      };\n\n    case \"UPDATE_DATA\":\n      //console.log(action.payload, \"update action value\")\n      return { ...state,\n        data: state.data.map(field => {\n          if (field._id === action.payload._id) {\n            return action.payload;\n          } else {\n            return field;\n          }\n        }),\n        loading: false\n      };\n\n    case \"DELETE_DATA\":\n      //console.log(action.payload, \"Delete action value\")\n      return { ...state,\n        data: [...state.data].filter(field => field._id !== action.payload._id),\n        loading: false\n      };\n\n    case \"ERROR_FETCH\":\n      return { ...state,\n        error: action.payload,\n        loading: false\n      };\n\n    default:\n      return state;\n  }\n}; // const StateProvider: any = (props: any) => {\n//     const [state, dispatch] = useReducer(reducer, initialState)\n//     return (\n//         <GlobalState.Provider value={state}>\n//         {chilfren}\n//         </GlobalState>\n//     )\n// }","map":{"version":3,"sources":["C:/Users/martineztrujillo.8/Downloads/test-epayco-master/test-epayco-master/frontend/app/src/store/store.jsx"],"names":["React","createContext","useReducer","initialState","data","cliente","documento","nombres","undefined","mail","celular","action","billetera","cliente_id","saldo","ultima_actividad","token","monto_pago","GlobalState","reducer","state","type","concat","payload","loading","singleData","map","field","_id","filter","error"],"mappings":"AAAA,OAAOA,KAAP,IAAeC,aAAf,EAA8BC,UAA9B,QAA+C,OAA/C,C,CACA;AACA;;AAGA,OAAO,MAAMC,YAAY,GAAE;AAEvBC,EAAAA,IAAI,EAAE,EAFiB;AAGvBC,EAAAA,OAAO,EAAE;AACLC,IAAAA,SAAS,EAAE,EADN;AAELC,IAAAA,OAAO,EAAEC,SAFJ;AAGLC,IAAAA,IAAI,EAAED,SAHD;AAILE,IAAAA,OAAO,EAAE,EAJJ;AAKLC,IAAAA,MAAM,EAAE;AALH,GAHc;AAWvBC,EAAAA,SAAS,EAAE;AACPC,IAAAA,UAAU,EAAE,EADL;AAEPC,IAAAA,KAAK,EAAE,CAFA;AAGPC,IAAAA,gBAAgB,EAAE,EAHX;AAIPC,IAAAA,KAAK,EAAE,EAJA;AAKPL,IAAAA,MAAM,EAAE,UALD;AAMPM,IAAAA,UAAU,EAAE;AANL;AAXY,CAApB;AAwBP,OAAO,MAAMC,WAAW,GAAGjB,aAAa,CAACE,YAAD,CAAjC;AAEP,OAAO,MAAMgB,OAAO,GAAG,CAACC,KAAD,EAAQT,MAAR,KAAmB;AACtC,UAAOA,MAAM,CAACU,IAAd;AACI,SAAK,aAAL;AACA;AACA,aAAO,EACH,GAAGD,KADA;AAEHhB,QAAAA,IAAI,EAAEgB,KAAK,CAAChB,IAAN,CAAWkB,MAAX,CAAkB,CAACX,MAAM,CAACY,OAAR,CAAlB,CAFH;AAGHC,QAAAA,OAAO,EAAE;AAHN,OAAP;;AAMA,SAAK,UAAL;AACF;AACE,aAAO,EACH,GAAGJ,KADA;AAEHhB,QAAAA,IAAI,EAAEO,MAAM,CAACY;AAFV,OAAP;;AAKA,SAAK,WAAL;AACI,aAAO,EACH,GAAGH,KADA;AAEHK,QAAAA,UAAU,EAAEd,MAAM,CAACY;AAFhB,OAAP;;AAKJ,SAAK,aAAL;AACF;AACE,aAAO,EACH,GAAGH,KADA;AAEHhB,QAAAA,IAAI,EAAEgB,KAAK,CAAChB,IAAN,CAAWsB,GAAX,CAAiBC,KAAD,IAAgB;AAClC,cAAGA,KAAK,CAACC,GAAN,KAAcjB,MAAM,CAACY,OAAP,CAAeK,GAAhC,EAAoC;AAChC,mBAAOjB,MAAM,CAACY,OAAd;AACH,WAFD,MAGI;AACA,mBAAOI,KAAP;AACH;AACJ,SAPK,CAFH;AAUHH,QAAAA,OAAO,EAAE;AAVN,OAAP;;AAaA,SAAK,aAAL;AACF;AACE,aAAO,EACH,GAAGJ,KADA;AAEHhB,QAAAA,IAAI,EAAE,CAAC,GAAGgB,KAAK,CAAChB,IAAV,EAAgByB,MAAhB,CAAwBF,KAAD,IAAgBA,KAAK,CAACC,GAAN,KAAcjB,MAAM,CAACY,OAAP,CAAeK,GAApE,CAFH;AAGHJ,QAAAA,OAAO,EAAE;AAHN,OAAP;;AAMA,SAAK,aAAL;AAEA,aAAO,EACH,GAAGJ,KADA;AAEHU,QAAAA,KAAK,EAAEnB,MAAM,CAACY,OAFX;AAGHC,QAAAA,OAAO,EAAE;AAHN,OAAP;;AAMA;AACI,aAAOJ,KAAP;AAtDR;AAwDH,CAzDM,C,CA2DP;AACA;AACA;AACA;AACA;AACA;AAEA;AACA","sourcesContent":["import React, {createContext, useReducer} from 'react';\n//import { GET_DATA } from '../graphql/queries/data';\n//import { useQuery } from 'react-apollo';\n\n\nexport const initialState= {\n\n    data: [],\n    cliente: {\n        documento: '',\n        nombres: undefined,\n        mail: undefined,\n        celular: '',\n        action: 'create'\n    },\n\n    billetera: {\n        cliente_id: '',\n        saldo: 0,\n        ultima_actividad: '',\n        token: '',\n        action: 'consulta',\n        monto_pago: 0,\n    }\n\n\n\n}\n\nexport const GlobalState = createContext(initialState)\n\nexport const reducer = (state, action) => {\n    switch(action.type) {\n        case \"CREATE_DATA\":\n        //console.log(action.payload, \"create data action value\")\n        return {\n            ...state,\n            data: state.data.concat([action.payload]),\n            loading: false  \n        };\n    \n        case \"GET_DATA\":\n      //console.log(action.payload, \"fetch data action value\")\n        return {\n            ...state,\n            data: action.payload,\n        };\n\n        case \"EDIT_DATA\":\n            return {\n                ...state,\n                singleData: action.payload,\n            };\n\n        case \"UPDATE_DATA\":\n      //console.log(action.payload, \"update action value\")\n        return {\n            ...state,\n            data: state.data.map( (field: any) => {\n                if(field._id === action.payload._id){\n                    return action.payload\n                }\n                else{\n                    return field\n                }\n            }),\n            loading: false\n        };\n\n        case \"DELETE_DATA\":\n      //console.log(action.payload, \"Delete action value\")\n        return {\n            ...state,\n            data: [...state.data].filter((field: any) => field._id !== action.payload._id),\n            loading: false\n        }; \n\n        case \"ERROR_FETCH\":\n\n        return {\n            ...state,\n            error: action.payload,\n            loading: false\n        }\n    \n        default:\n            return state\n    }\n}\n\n// const StateProvider: any = (props: any) => {\n//     const [state, dispatch] = useReducer(reducer, initialState)\n//     return (\n//         <GlobalState.Provider value={state}>\n//         {chilfren}\n//         </GlobalState>\n\n//     )\n// }"]},"metadata":{},"sourceType":"module"}